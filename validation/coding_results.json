{
  "test_summary": {
    "total_tests": 10,
    "successful_tests": 10,
    "syntax_valid_tests": 0,
    "average_latency_ms": 1404.0335541998957,
    "max_latency_ms": 1552.0284580002226,
    "average_peak_memory_mb": 1074.70625,
    "max_peak_memory_mb": 1076.046875,
    "latency_under_200ms": 0,
    "memory_under_10gb": 10
  },
  "test_results": [
    {
      "prompt_id": "function_generation_001",
      "category": "function_generation",
      "complexity": "basic",
      "prompt_text": "Write a Python function named calculate_factorial that takes an integer n and returns its factorial. Include a docstring with parameter and return value descriptions.",
      "generated_code": "........................................................................................................................................................................................................",
      "latency_ms": 1552.0284580002226,
      "peak_memory_mb": 1067.1875,
      "memory_before_mb": 1062.765625,
      "memory_after_mb": 1067.1875,
      "token_count_input": 29,
      "token_count_output": 200,
      "success": true,
      "error_message": null,
      "syntax_valid": false
    },
    {
      "prompt_id": "code_completion_001",
      "category": "code_completion",
      "complexity": "basic",
      "prompt_text": "Complete the following Python class method get_full_name:\n\nclass User:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def g...",
      "generated_code": "method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method method",
      "latency_ms": 1387.1348749999015,
      "peak_memory_mb": 1074.796875,
      "memory_before_mb": 1074.484375,
      "memory_after_mb": 1074.796875,
      "token_count_input": 56,
      "token_count_output": 200,
      "success": true,
      "error_message": null,
      "syntax_valid": false
    },
    {
      "prompt_id": "docstring_generation_001",
      "category": "docstring_generation",
      "complexity": "basic",
      "prompt_text": "Add a PEP 257 compliant docstring to the following Python function:\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            ret...",
      "generated_code": "True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True",
      "latency_ms": 1398.136749999594,
      "peak_memory_mb": 1075.125,
      "memory_before_mb": 1075.0,
      "memory_after_mb": 1075.125,
      "token_count_input": 66,
      "token_count_output": 200,
      "success": true,
      "error_message": null,
      "syntax_valid": false
    },
    {
      "prompt_id": "refactoring_001",
      "category": "simple_refactoring",
      "complexity": "basic",
      "prompt_text": "Refactor the following Python code to use a list comprehension:\n\nsquares = []\nfor i in range(10):\n    squares.append(i*i)",
      "generated_code": "))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
      "latency_ms": 1387.5908750001145,
      "peak_memory_mb": 1075.359375,
      "memory_before_mb": 1075.15625,
      "memory_after_mb": 1075.359375,
      "token_count_input": 29,
      "token_count_output": 200,
      "success": true,
      "error_message": null,
      "syntax_valid": false
    },
    {
      "prompt_id": "bug_detection_001",
      "category": "bug_detection",
      "complexity": "basic",
      "prompt_text": "Identify and fix the bug in this Python function:\n\ndef find_item(items, target):\n    for item in items:\n        if item = target:  # Bug is here\n            return True\n    return False",
      "generated_code": "False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False False",
      "latency_ms": 1387.390249999953,
      "peak_memory_mb": 1075.640625,
      "memory_before_mb": 1075.359375,
      "memory_after_mb": 1075.640625,
      "token_count_input": 43,
      "token_count_output": 200,
      "success": true,
      "error_message": null,
      "syntax_valid": false
    },
    {
      "prompt_id": "algorithm_implementation_001",
      "category": "algorithm_implementation",
      "complexity": "intermediate",
      "prompt_text": "Implement a Python function called binary_search that takes a sorted list and a target value, then returns the index of the target or -1 if not found. Include proper error handling and a comprehensive...",
      "generated_code": "........................................................................................................................................................................................................",
      "latency_ms": 1394.5832089998476,
      "peak_memory_mb": 1075.671875,
      "memory_before_mb": 1075.640625,
      "memory_after_mb": 1075.671875,
      "token_count_input": 41,
      "token_count_output": 200,
      "success": true,
      "error_message": null,
      "syntax_valid": false
    },
    {
      "prompt_id": "data_structure_001",
      "category": "data_structure_implementation",
      "complexity": "intermediate",
      "prompt_text": "Create a Python class called Stack that implements a basic stack data structure with push, pop, peek, and is_empty methods. Include type hints and proper error handling for empty stack operations.",
      "generated_code": "........................................................................................................................................................................................................",
      "latency_ms": 1359.567665999748,
      "peak_memory_mb": 1075.6875,
      "memory_before_mb": 1075.6875,
      "memory_after_mb": 1075.6875,
      "token_count_input": 37,
      "token_count_output": 200,
      "success": true,
      "error_message": null,
      "syntax_valid": false
    },
    {
      "prompt_id": "string_processing_001",
      "category": "string_processing",
      "complexity": "intermediate",
      "prompt_text": "Write a Python function called validate_email that takes a string and returns True if it's a valid email format, False otherwise. Use regular expressions and handle edge cases like empty strings.",
      "generated_code": "........................................................................................................................................................................................................",
      "latency_ms": 1396.0369159999573,
      "peak_memory_mb": 1075.703125,
      "memory_before_mb": 1075.6875,
      "memory_after_mb": 1075.703125,
      "token_count_input": 36,
      "token_count_output": 200,
      "success": true,
      "error_message": null,
      "syntax_valid": false
    },
    {
      "prompt_id": "file_operations_001",
      "category": "file_operations",
      "complexity": "intermediate",
      "prompt_text": "Create a Python function called read_csv_safely that reads a CSV file and returns its contents as a list of dictionaries. Include proper exception handling for file not found, permission errors, and m...",
      "generated_code": "........................................................................................................................................................................................................",
      "latency_ms": 1385.9877089998918,
      "peak_memory_mb": 1075.84375,
      "memory_before_mb": 1075.703125,
      "memory_after_mb": 1075.84375,
      "token_count_input": 42,
      "token_count_output": 200,
      "success": true,
      "error_message": null,
      "syntax_valid": false
    },
    {
      "prompt_id": "async_programming_001",
      "category": "async_programming",
      "complexity": "advanced",
      "prompt_text": "Write an async Python function called fetch_urls that takes a list of URLs and returns their HTTP status codes concurrently. Use aiohttp and include proper error handling for network timeouts and inva...",
      "generated_code": "........................................................................................................................................................................................................",
      "latency_ms": 1391.8788339997263,
      "peak_memory_mb": 1076.046875,
      "memory_before_mb": 1075.84375,
      "memory_after_mb": 1076.046875,
      "token_count_input": 37,
      "token_count_output": 200,
      "success": true,
      "error_message": null,
      "syntax_valid": false
    }
  ]
}