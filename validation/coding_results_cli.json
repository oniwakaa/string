[
  {
    "prompt_id": "function_generation_001",
    "category": "function_generation",
    "complexity": "basic",
    "prompt_text": "Write a Python function named calculate_factorial that takes an integer n and returns its factorial. Include a docstring with parameter and return value descriptions.",
    "generated_code": "The input will be a non-negative integer, and the output should also be an integer.\nExample:\n```python\nprint(calculate_factorial(5))  # Output: 120\n```\nAnswer:\ndef calculate_factorial(n):\n    \"\"\"\n    Calculate the factorial of a given number n.\n    Parameters:\n    n (int): A non-negative integer.\n    Returns:\n    int: The factorial of n.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result [end of text]",
    "latency_ms": 4923.002004623413,
    "peak_memory_mb": 17.859375,
    "memory_before_mb": 17.15625,
    "memory_after_mb": 17.859375,
    "token_count_input": 24,
    "token_count_output": 80,
    "success": true,
    "error_message": null,
    "syntax_valid": false
  },
  {
    "prompt_id": "code_completion_001",
    "category": "code_completion",
    "complexity": "basic",
    "prompt_text": "Complete the following Python class method get_full_name:\n\nclass User:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n\n    def get_full_name(self):\n        # TODO: Complete this method",
    "generated_code": "to return a full name of the user.\n        pass\nuser1 = User(\"John\", \"Doe\")\nprint(user1.get_full_name())  # Should print \"<NAME>\"\n [end of text]",
    "latency_ms": 1632.7548027038574,
    "peak_memory_mb": 17.859375,
    "memory_before_mb": 17.859375,
    "memory_after_mb": 17.859375,
    "token_count_input": 26,
    "token_count_output": 21,
    "success": true,
    "error_message": null,
    "syntax_valid": false
  },
  {
    "prompt_id": "docstring_generation_001",
    "category": "docstring_generation",
    "complexity": "basic",
    "prompt_text": "Add a PEP 257 compliant docstring to the following Python function:\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
    "generated_code": "The docstring should include a brief description of the function's purpose and any parameters it takes.\nAnswer:\ndef is_prime(n):\n    \"\"\"\n    Checks whether an integer `n` is prime or not.\n    Parameters:\n    n (int): The number to be checked for primality.\n    Returns:\n    bool: True if `n` is a prime number, False otherwise.\n    Examples:\n    >>> is_prime(5)\n    True\n    >>> is_prime(8)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True [end of text]",
    "latency_ms": 4854.245901107788,
    "peak_memory_mb": 17.921875,
    "memory_before_mb": 17.875,
    "memory_after_mb": 17.921875,
    "token_count_input": 36,
    "token_count_output": 84,
    "success": true,
    "error_message": null,
    "syntax_valid": false
  },
  {
    "prompt_id": "refactoring_001",
    "category": "simple_refactoring",
    "complexity": "basic",
    "prompt_text": "Refactor the following Python code to use a list comprehension:\n\nsquares = []\nfor i in range(10):\n    squares.append(i*i)",
    "generated_code": "[end of text]",
    "latency_ms": 573.6939907073975,
    "peak_memory_mb": 17.9375,
    "memory_before_mb": 17.921875,
    "memory_after_mb": 17.9375,
    "token_count_input": 18,
    "token_count_output": 3,
    "success": true,
    "error_message": null,
    "syntax_valid": false
  },
  {
    "prompt_id": "bug_detection_001",
    "category": "bug_detection",
    "complexity": "basic",
    "prompt_text": "Identify and fix the bug in this Python function:\n\ndef find_item(items, target):\n    for item in items:\n        if item = target:  # Bug is here\n            return True\n    return False",
    "generated_code": "The correct solution to the above question is not provided. \nHowever, a related question is given as an example of a multiple-choice question-and-answer pair.\nQuestion: What is the output of the following Python code?\ndef find_item(items, target):\n    for item in items:\n        if item == target:\n            return True\n    return False\nitems = [1, 2, 3]\ntarget = 4\nprint(find_item(items, target))\nA) True\nB) False\nC) None\nD) Error\nAnswer: B [end of text]",
    "latency_ms": 3755.1538944244385,
    "peak_memory_mb": 17.9375,
    "memory_before_mb": 17.9375,
    "memory_after_mb": 17.9375,
    "token_count_input": 28,
    "token_count_output": 72,
    "success": true,
    "error_message": null,
    "syntax_valid": true
  },
  {
    "prompt_id": "algorithm_implementation_001",
    "category": "algorithm_implementation",
    "complexity": "intermediate",
    "prompt_text": "Implement a Python function called binary_search that takes a sorted list and a target value, then returns the index of the target or -1 if not found. Include proper error handling and a comprehensive docstring.",
    "generated_code": "Example:\n```python\nsorted_list = [2, 5, 8, 12, 16, 23, 38, 56, 72]\ntarget_value = 23\nindex_of_target = binary_search(sorted_list, target_value)\nprint(index_of_target) # Output: 6\n```\nIn this example, the function should return `6` because `23` is located at index `6` in the sorted list.\nAnswer:\ndef binary_search(sorted_list, target_value):\n    \"\"\"\n    Performs a binary search on a sorted list to find the index of a target value.\n    Args:\n        sorted_list (list): A sorted list of integers or floats.\n        target_value (int/float): The value to be searched in the list.\n    Returns:\n        int: The index of the target value if found, otherwise -1.\n    \"\"\"\n    # Handle empty list\n    if not sorted_list:\n        return -1\n    # Initialize left and right pointers\n    left = 0\n    right = len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        # Check if target value is found at the middle index\n        if sorted_list[mid] == target_value:\n            return mid\n        # Adjust search range based on comparison with target value\n        elif sorted_list[mid] < target_value:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # Target value not found in the list\n    return -1 [end of text]",
    "latency_ms": 9557.723045349121,
    "peak_memory_mb": 18.0,
    "memory_before_mb": 17.953125,
    "memory_after_mb": 18.0,
    "token_count_input": 35,
    "token_count_output": 187,
    "success": true,
    "error_message": null,
    "syntax_valid": false
  },
  {
    "prompt_id": "data_structure_001",
    "category": "data_structure_implementation",
    "complexity": "intermediate",
    "prompt_text": "Create a Python class called Stack that implements a basic stack data structure with push, pop, peek, and is_empty methods. Include type hints and proper error handling for empty stack operations.",
    "generated_code": "Provide at least three examples of how to use your Stack class.\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            raise ValueError(\"Stack is empty\")\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            raise ValueError(\"Stack is empty\")\n    def is_empty(self):\n        return len(self.items) == 0\n# Example usage\nstack = Stack()\nprint(stack.is_empty())  # Output: True\nstack.push(5)\nstack.push(10)\nstack.push(15)\nprint(stack.peek())  # Output: 15\nprint(stack.pop())   # Output: 15\nprint(stack.pop())   # Output: 10\nprint(stack.pop())   # Output: 5\nprint(stack.is_empty())  # Output: True\ntry:\n    stack.pop()\nexcept ValueError as e:\n    print(e)  # Output: Stack is empty\n```\nIn this example, we create a `Stack` class with methods for pushing and popping elements. We also include a `peek` method to return the top element without removing it from the stack.\nThe `is_empty()` method checks if the stack is empty by comparing its length to zero.\nWe provide three examples of using the Stack class:\n1.  Creating an empty stack: `stack = Stack()`\n2.  Pushing elements onto the stack: `stack.push(5)`, `stack.push(10)`, and `stack.push(15)`\n3.  Popping elements from the stack: `print(stack.pop())` returns `15`, then `10`, then `5`\nWe also demonstrate how to handle an empty stack by attempting to pop an element, which raises a `ValueError`. [end of text]",
    "latency_ms": 11500.257015228271,
    "peak_memory_mb": 18.015625,
    "memory_before_mb": 18.0,
    "memory_after_mb": 18.015625,
    "token_count_input": 31,
    "token_count_output": 209,
    "success": true,
    "error_message": null,
    "syntax_valid": false
  },
  {
    "prompt_id": "string_processing_001",
    "category": "string_processing",
    "complexity": "intermediate",
    "prompt_text": "Write a Python function called validate_email that takes a string and returns True if it's a valid email format, False otherwise. Use regular expressions and handle edge cases like empty strings.",
    "generated_code": "Input: A single string representing an email address.\nOutput: A boolean value (True or False).\nExample:\n```python\nprint(validate_email(\"example@example.com\"))  # Output should be True\nprint(validate_email(\"\"))                      # Output should be False\n```\nAnswer:\ndef validate_email(email):\n    import re\n    # Regular expression pattern for a valid email address\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}$\"\n    if not email:\n        return False  # Empty string is not a valid email\n    match = re.fullmatch(pattern, email)\n    return bool(match) [end of text]",
    "latency_ms": 4487.890243530273,
    "peak_memory_mb": 18.140625,
    "memory_before_mb": 18.140625,
    "memory_after_mb": 18.140625,
    "token_count_input": 31,
    "token_count_output": 69,
    "success": true,
    "error_message": null,
    "syntax_valid": false
  },
  {
    "prompt_id": "file_operations_001",
    "category": "file_operations",
    "complexity": "intermediate",
    "prompt_text": "Create a Python function called read_csv_safely that reads a CSV file and returns its contents as a list of dictionaries. Include proper exception handling for file not found, permission errors, and malformed CSV data.",
    "generated_code": "The input to the function should be the path to the CSV file (e.g., 'path/to/file.csv'), and the output should be a list of dictionaries where each dictionary represents a row in the CSV file.\nExample:\n```python\nimport csv\ndef read_csv_safely(file_path):\n    try:\n        with open(file_path, mode='r') as file:\n            reader = csv.DictReader(file)\n            return [row for row in reader]\n    except FileNotFoundError:\n        print(\"File not found.\")\n    except PermissionError:\n        print(\"Permission denied.\")\n    except Exception as e:\n        print(f\"Error reading CSV: {e}\")\n```\nTest the function with a valid CSV file:\n```python\ncsv_data = read_csv_safely('data.csv')\nprint(csv_data)\n# Output should be a list of dictionaries representing the rows in 'data.csv'\n```\nAnswer:\ndef read_csv_safely(file_path):\n    try:\n        with open(file_path, mode='r') as file:\n            reader = csv.DictReader(file)\n            return [row for row in reader]\n    except FileNotFoundError:\n        print(\"File not found.\")\n    except PermissionError:\n        print(\"Permission denied.\")\n    except Exception as e:\n        print(f\"Error reading CSV: {e}\") [end of text]",
    "latency_ms": 7815.291166305542,
    "peak_memory_mb": 18.15625,
    "memory_before_mb": 18.15625,
    "memory_after_mb": 18.15625,
    "token_count_input": 34,
    "token_count_output": 138,
    "success": true,
    "error_message": null,
    "syntax_valid": false
  },
  {
    "prompt_id": "async_programming_001",
    "category": "async_programming",
    "complexity": "advanced",
    "prompt_text": "Write an async Python function called fetch_urls that takes a list of URLs and returns their HTTP status codes concurrently. Use aiohttp and include proper error handling for network timeouts and invalid URLs.",
    "generated_code": "The function should return a dictionary with the URL as key and its corresponding HTTP status code as value.\nExample:\n```python\nurls = [\n    \"https://www.example.com\",\n    \"https://example.org\",\n    \"https://invalid-url\"\n]\n# Expected output:\n{\n    \"https://www.example.com\": 200,\n    \"https://example.org\": 200,\n    \"https://invalid-url\": None\n}\n```\nNote: The function should handle invalid URLs gracefully by returning `None` for them.\nAnswer:\n```python\nimport asyncio\nfrom aiohttp import ClientSession\nasync def fetch_urls(urls):\n    results = {}\n    async with ClientSession() as session:\n        tasks = []\n        for url in urls:\n            task = asyncio.create_task(fetch_url(url, session))\n            tasks.append(task)\n        await asyncio.gather(*tasks)\n        for result in tasks:\n            if result.result():\n                results[result.result().url] = result.result().status\n    return results\nasync def fetch_url(url, session):\n    try:\n        async with session.get(url) as response:\n            return response.status\n    except (aiohttp.ClientError, asyncio.TimeoutError):\n        pass  # Handle network timeouts and invalid URLs gracefully by returning None.\n# Example usage:\nurls = [\n    \"https://www.example.com\",\n    \"https://example.org\",\n    \"https://invalid-url\"\n]\nresult = await fetch_urls(urls)\nprint(result)  # Output: {'https://www.example.com': 200, 'https://example.org': 200, 'https://invalid-url': None}\n``` [end of text]",
    "latency_ms": 9805.975914001465,
    "peak_memory_mb": 18.28125,
    "memory_before_mb": 18.234375,
    "memory_after_mb": 18.28125,
    "token_count_input": 33,
    "token_count_output": 151,
    "success": true,
    "error_message": null,
    "syntax_valid": false
  }
]