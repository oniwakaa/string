{
  "test_overview": {
    "total_test_cases": 11,
    "known_failure_cases": 3,
    "edge_cases": 8,
    "strategies_tested": 4
  },
  "strategy_results": {
    "current_minimal": {
      "strategy_name": "current_minimal",
      "template": "Intent classification for: {prompt}\n\nCategories: web_research, codebase_query, code_generation, code_editing, code_analysis, documentation, tool_execution\n\nChoose the best match:",
      "total_cases": 11,
      "correct_cases": 3,
      "accuracy": 27.27272727272727,
      "average_time": 1.3775640400973233,
      "detailed_results": [
        {
          "prompt": "Research the history of Python decorators and insert a summary at the top of calculator_comprehensive.py",
          "expected": "web_research",
          "actual": "code_editing",
          "confidence": 0.9,
          "correct": false,
          "time": 7.989963054656982
        },
        {
          "prompt": "Explain how the calculator class works and its design patterns",
          "expected": "codebase_query",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": false,
          "time": 1.0862579345703125
        },
        {
          "prompt": "Run unit tests on calculator_comprehensive.py and summarize the results",
          "expected": "tool_execution",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": false,
          "time": 0.6015951633453369
        },
        {
          "prompt": "Get Python documentation from the official website",
          "expected": "web_research",
          "actual": "documentation",
          "confidence": 0.9,
          "correct": false,
          "time": 0.38242673873901367
        },
        {
          "prompt": "Fetch API information from external sources",
          "expected": "web_research",
          "actual": "code_generation",
          "confidence": 0.9,
          "correct": false,
          "time": 0.972898006439209
        },
        {
          "prompt": "Execute all unit tests and report results",
          "expected": "tool_execution",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": false,
          "time": 0.5983660221099854
        },
        {
          "prompt": "Run the code formatter on these files",
          "expected": "tool_execution",
          "actual": "code_editing",
          "confidence": 0.9,
          "correct": false,
          "time": 0.8446929454803467
        },
        {
          "prompt": "How does the authentication system work?",
          "expected": "codebase_query",
          "actual": "documentation",
          "confidence": 0.9,
          "correct": false,
          "time": 0.7974169254302979
        },
        {
          "prompt": "Find the database connection configuration",
          "expected": "codebase_query",
          "actual": "codebase_query",
          "confidence": 0.9,
          "correct": true,
          "time": 0.6013460159301758
        },
        {
          "prompt": "Analyze code quality and suggest improvements",
          "expected": "code_analysis",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": true,
          "time": 0.6783008575439453
        },
        {
          "prompt": "Review this code for security issues",
          "expected": "code_analysis",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": true,
          "time": 0.5999407768249512
        }
      ]
    },
    "enhanced_definitions": {
      "strategy_name": "enhanced_definitions",
      "template": "Classify user request into ONE intent:\n\nweb_research: Get external info (NOT code modification)\ncodebase_query: Understand code (NOT quality evaluation)  \ncode_generation: Create new code (NOT modify existing)\ncode_editing: Modify existing code (NOT create new)\ncode_analysis: Evaluate quality (NOT understand logic)\ndocumentation: Add docs/comments (NOT code changes)\ntool_execution: Run/execute/test (NOT inspect/analyze)\n\nRequest: {prompt}\n\nIntent:",
      "total_cases": 11,
      "correct_cases": 8,
      "accuracy": 72.72727272727273,
      "average_time": 0.5885035991668701,
      "detailed_results": [
        {
          "prompt": "Research the history of Python decorators and insert a summary at the top of calculator_comprehensive.py",
          "expected": "web_research",
          "actual": "web_research",
          "confidence": 0.9,
          "correct": true,
          "time": 0.8873798847198486
        },
        {
          "prompt": "Explain how the calculator class works and its design patterns",
          "expected": "codebase_query",
          "actual": "codebase_query",
          "confidence": 0.9,
          "correct": true,
          "time": 0.6259541511535645
        },
        {
          "prompt": "Run unit tests on calculator_comprehensive.py and summarize the results",
          "expected": "tool_execution",
          "actual": "tool_execution",
          "confidence": 0.9,
          "correct": true,
          "time": 0.5706918239593506
        },
        {
          "prompt": "Get Python documentation from the official website",
          "expected": "web_research",
          "actual": "documentation",
          "confidence": 0.9,
          "correct": false,
          "time": 0.3644979000091553
        },
        {
          "prompt": "Fetch API information from external sources",
          "expected": "web_research",
          "actual": "web_research",
          "confidence": 0.9,
          "correct": true,
          "time": 0.5294828414916992
        },
        {
          "prompt": "Execute all unit tests and report results",
          "expected": "tool_execution",
          "actual": "tool_execution",
          "confidence": 0.9,
          "correct": true,
          "time": 0.5733790397644043
        },
        {
          "prompt": "Run the code formatter on these files",
          "expected": "tool_execution",
          "actual": "tool_execution",
          "confidence": 0.9,
          "correct": true,
          "time": 0.5205550193786621
        },
        {
          "prompt": "How does the authentication system work?",
          "expected": "codebase_query",
          "actual": "web_research",
          "confidence": 0.9,
          "correct": false,
          "time": 0.5161311626434326
        },
        {
          "prompt": "Find the database connection configuration",
          "expected": "codebase_query",
          "actual": "web_research",
          "confidence": 0.9,
          "correct": false,
          "time": 0.7651278972625732
        },
        {
          "prompt": "Analyze code quality and suggest improvements",
          "expected": "code_analysis",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": true,
          "time": 0.5932528972625732
        },
        {
          "prompt": "Review this code for security issues",
          "expected": "code_analysis",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": true,
          "time": 0.5270869731903076
        }
      ]
    },
    "keyword_focused": {
      "strategy_name": "keyword_focused",
      "template": "Intent classification for: {prompt}\n\nCategories with key indicators:\n\u2022 web_research: research, history, fetch, external, web\n\u2022 codebase_query: explain, how works, find, understand  \n\u2022 code_generation: create, new, add, build, implement\n\u2022 code_editing: optimize, fix, modify, update, refactor\n\u2022 code_analysis: analyze, quality, structure, review\n\u2022 documentation: docstring, comment, document, explain usage\n\u2022 tool_execution: run, execute, test, command\n\nChoose the best match:",
      "total_cases": 11,
      "correct_cases": 5,
      "accuracy": 45.45454545454545,
      "average_time": 1.3945534879511052,
      "detailed_results": [
        {
          "prompt": "Research the history of Python decorators and insert a summary at the top of calculator_comprehensive.py",
          "expected": "web_research",
          "actual": "codebase_query",
          "confidence": 0.9,
          "correct": false,
          "time": 1.247446060180664
        },
        {
          "prompt": "Explain how the calculator class works and its design patterns",
          "expected": "codebase_query",
          "actual": "documentation",
          "confidence": 0.9,
          "correct": false,
          "time": 2.6221160888671875
        },
        {
          "prompt": "Run unit tests on calculator_comprehensive.py and summarize the results",
          "expected": "tool_execution",
          "actual": "tool_execution",
          "confidence": 0.9,
          "correct": true,
          "time": 1.3355457782745361
        },
        {
          "prompt": "Get Python documentation from the official website",
          "expected": "web_research",
          "actual": "documentation",
          "confidence": 0.9,
          "correct": false,
          "time": 0.6977939605712891
        },
        {
          "prompt": "Fetch API information from external sources",
          "expected": "web_research",
          "actual": "codebase_query",
          "confidence": 0.9,
          "correct": false,
          "time": 1.2447240352630615
        },
        {
          "prompt": "Execute all unit tests and report results",
          "expected": "tool_execution",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": false,
          "time": 1.3252739906311035
        },
        {
          "prompt": "Run the code formatter on these files",
          "expected": "tool_execution",
          "actual": "tool_execution",
          "confidence": 0.9,
          "correct": true,
          "time": 0.8992919921875
        },
        {
          "prompt": "How does the authentication system work?",
          "expected": "codebase_query",
          "actual": "web_research",
          "confidence": 0.9,
          "correct": false,
          "time": 2.901419162750244
        },
        {
          "prompt": "Find the database connection configuration",
          "expected": "codebase_query",
          "actual": "codebase_query",
          "confidence": 0.9,
          "correct": true,
          "time": 1.157531976699829
        },
        {
          "prompt": "Analyze code quality and suggest improvements",
          "expected": "code_analysis",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": true,
          "time": 0.9642500877380371
        },
        {
          "prompt": "Review this code for security issues",
          "expected": "code_analysis",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": true,
          "time": 0.944695234298706
        }
      ]
    },
    "action_focused": {
      "strategy_name": "action_focused",
      "template": "What does the user want to DO?\n\n{prompt}\n\nPick ONE action type:\nweb_research = get info from external sources\ncodebase_query = understand existing code logic\ncode_generation = write new code from scratch\ncode_editing = change/improve existing code\ncode_analysis = check code quality/structure  \ndocumentation = add explanations/comments\ntool_execution = run/test/execute code\n\nAnswer:",
      "total_cases": 11,
      "correct_cases": 6,
      "accuracy": 54.54545454545454,
      "average_time": 0.7737284573641691,
      "detailed_results": [
        {
          "prompt": "Research the history of Python decorators and insert a summary at the top of calculator_comprehensive.py",
          "expected": "web_research",
          "actual": "documentation",
          "confidence": 0.9,
          "correct": false,
          "time": 0.7902100086212158
        },
        {
          "prompt": "Explain how the calculator class works and its design patterns",
          "expected": "codebase_query",
          "actual": "general_query",
          "confidence": 0.3,
          "correct": false,
          "time": 0.42214488983154297
        },
        {
          "prompt": "Run unit tests on calculator_comprehensive.py and summarize the results",
          "expected": "tool_execution",
          "actual": "tool_execution",
          "confidence": 0.9,
          "correct": true,
          "time": 0.8585991859436035
        },
        {
          "prompt": "Get Python documentation from the official website",
          "expected": "web_research",
          "actual": "documentation",
          "confidence": 0.9,
          "correct": false,
          "time": 0.667792797088623
        },
        {
          "prompt": "Fetch API information from external sources",
          "expected": "web_research",
          "actual": "web_research",
          "confidence": 0.9,
          "correct": true,
          "time": 1.2283070087432861
        },
        {
          "prompt": "Execute all unit tests and report results",
          "expected": "tool_execution",
          "actual": "tool_execution",
          "confidence": 0.9,
          "correct": true,
          "time": 0.8253459930419922
        },
        {
          "prompt": "Run the code formatter on these files",
          "expected": "tool_execution",
          "actual": "tool_execution",
          "confidence": 0.9,
          "correct": true,
          "time": 0.859428882598877
        },
        {
          "prompt": "How does the authentication system work?",
          "expected": "codebase_query",
          "actual": "general_query",
          "confidence": 0.3,
          "correct": false,
          "time": 0.41895413398742676
        },
        {
          "prompt": "Find the database connection configuration",
          "expected": "codebase_query",
          "actual": "web_research",
          "confidence": 0.9,
          "correct": false,
          "time": 0.8323631286621094
        },
        {
          "prompt": "Analyze code quality and suggest improvements",
          "expected": "code_analysis",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": true,
          "time": 0.7975549697875977
        },
        {
          "prompt": "Review this code for security issues",
          "expected": "code_analysis",
          "actual": "code_analysis",
          "confidence": 0.9,
          "correct": true,
          "time": 0.810312032699585
        }
      ]
    }
  },
  "best_strategy": {
    "name": "enhanced_definitions",
    "accuracy": 72.72727272727273,
    "improvement": 45.45454545454547
  },
  "failure_analysis": {
    "common_failure_patterns": {
      "web_research \u2192 code_editing": {
        "count": 1,
        "examples": [
          "Research the history of Python decorators and inse"
        ]
      },
      "codebase_query \u2192 code_analysis": {
        "count": 1,
        "examples": [
          "Explain how the calculator class works and its des"
        ]
      },
      "tool_execution \u2192 code_analysis": {
        "count": 3,
        "examples": [
          "Run unit tests on calculator_comprehensive.py and ",
          "Execute all unit tests and report results"
        ]
      },
      "web_research \u2192 documentation": {
        "count": 5,
        "examples": [
          "Get Python documentation from the official website",
          "Get Python documentation from the official website"
        ]
      },
      "web_research \u2192 code_generation": {
        "count": 1,
        "examples": [
          "Fetch API information from external sources"
        ]
      },
      "tool_execution \u2192 code_editing": {
        "count": 1,
        "examples": [
          "Run the code formatter on these files"
        ]
      },
      "codebase_query \u2192 documentation": {
        "count": 2,
        "examples": [
          "How does the authentication system work?",
          "Explain how the calculator class works and its des"
        ]
      },
      "codebase_query \u2192 web_research": {
        "count": 4,
        "examples": [
          "How does the authentication system work?",
          "Find the database connection configuration"
        ]
      },
      "web_research \u2192 codebase_query": {
        "count": 2,
        "examples": [
          "Research the history of Python decorators and inse",
          "Fetch API information from external sources"
        ]
      },
      "codebase_query \u2192 general_query": {
        "count": 2,
        "examples": [
          "Explain how the calculator class works and its des",
          "How does the authentication system work?"
        ]
      }
    },
    "most_problematic": [
      "web_research \u2192 documentation",
      {
        "count": 5,
        "examples": [
          "Get Python documentation from the official website",
          "Get Python documentation from the official website"
        ]
      }
    ]
  }
}