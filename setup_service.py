# Generated by SmolLM3-3B on 2025-01-01
"""
Setup script for GGUF Memory Service

This script helps set up the environment and dependencies for the GGUF Memory Service.
"""

import os
import sys
import subprocess
from pathlib import Path


def check_python_version():
    """Check if Python version is compatible."""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ is required")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detected")
    return True


def check_model_file():
    """Check if the GGUF model file exists."""
    model_path = Path("./smollm-quantized/smollm-q4_K_M.gguf")
    if model_path.exists():
        size_mb = model_path.stat().st_size / (1024 * 1024)
        print(f"‚úÖ GGUF model found: {model_path} ({size_mb:.1f} MB)")
        return True
    else:
        print(f"‚ùå GGUF model not found at: {model_path}")
        print("   Please ensure the model file is present before running the service")
        return False


def install_dependencies():
    """Install required dependencies."""
    print("üì¶ Installing dependencies...")
    
    # Install base requirements if they exist
    if Path("requirements.txt").exists():
        print("Installing base requirements...")
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], check=True)
    
    # Install GGUF-specific requirements
    if Path("requirements_gguf.txt").exists():
        print("Installing GGUF service requirements...")
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements_gguf.txt"], check=True)
    else:
        # Install minimal requirements if file doesn't exist
        print("Installing minimal requirements...")
        requirements = [
            "ctransformers>=0.2.27",
            "PyYAML>=6.0",
            "uvicorn>=0.24.0",
            "fastapi>=0.104.0",
            "python-dotenv>=1.0.0"
        ]
        for req in requirements:
            subprocess.run([sys.executable, "-m", "pip", "install", req], check=True)
    
    print("‚úÖ Dependencies installed successfully")


def check_memos_installation():
    """Check if MemOS is properly accessible."""
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'MemOS', 'src'))
    
    try:
        import memos
        print("‚úÖ MemOS modules accessible")
        return True
    except ImportError as e:
        print(f"‚ùå MemOS modules not accessible: {e}")
        print("   Make sure the MemOS directory structure is correct")
        return False


def create_config_if_missing():
    """Create default config.yaml if it doesn't exist."""
    config_path = Path("config.yaml")
    if not config_path.exists():
        print("üìù Creating default config.yaml...")
        
        default_config = """# Generated by SmolLM3-3B on 2025-01-01
# Configuration for MemOS with GGUF Model Integration

# MemOS Core Configuration
memos:
  user_id: "default_user"
  session_id: "default_session"
  enable_textual_memory: true
  enable_activation_memory: false
  top_k: 5

# GGUF Model Configuration
gguf_model:
  # Path to the GGUF model file (can be overridden by GGUF_MODEL_PATH env var)
  model_path: "./smollm-quantized/smollm-q4_K_M.gguf"
  
  # Generation parameters
  generation:
    max_tokens: 512
    temperature: 0.7
    top_p: 0.9
    top_k: 50
    repetition_penalty: 1.1
    remove_think_prefix: false
  
  # Hardware and performance settings
  hardware:
    gpu_layers: 0  # Number of layers to offload to GPU (0 = CPU only)
    threads: null  # Number of threads (null = auto-detect)
    context_length: 16384  # Increased from 2048 to better utilize model's training context
  
  # Model loading settings
  loading:
    auto_load: true  # Load model automatically on service startup
    validate_on_load: true  # Validate model file before loading

# Service Configuration
service:
  # Health check settings
  health_check:
    enabled: true
    endpoint: "/health"
    include_model_info: true
  
  # API settings
  api:
    host: "0.0.0.0"
    port: 8000
    title: "MemOS with GGUF Integration"
    description: "A persistent service integrating MemOS memory layer with GGUF models"
    version: "1.0.0"

# Memory Integration Configuration
memory:
  # Memory retrieval settings before inference
  retrieval:
    enabled: true
    top_k: 5
    mode: "fast"  # Options: "fast", "fine"
    memory_types: ["All"]  # Options: ["All", "WorkingMemory", "LongTermMemory", "UserMemory"]
  
  # Memory cube configuration
  cube:
    default_cube_id: "default_cube"
    auto_create: true

# Logging Configuration
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
"""
        
        with open(config_path, 'w') as f:
            f.write(default_config)
        
        print("‚úÖ Default config.yaml created")
    else:
        print("‚úÖ config.yaml already exists")


def run_service_test():
    """Test if the service can be imported and basic setup works."""
    print("üß™ Testing service setup...")
    
    try:
        # Test config loading
        from config_loader import load_config
        config = load_config()
        print("‚úÖ Configuration loading works")
        
        # Test MemOS imports (without actually starting the service)
        import gguf_memory_service
        print("‚úÖ Service imports work")
        
        return True
    except Exception as e:
        print(f"‚ùå Service test failed: {e}")
        return False


def main():
    """Main setup function."""
    print("üöÄ Setting up GGUF Memory Service")
    print("=" * 50)
    
    success = True
    
    # Check Python version
    if not check_python_version():
        success = False
    
    # Install dependencies
    try:
        install_dependencies()
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install dependencies: {e}")
        success = False
    
    # Check MemOS installation
    if not check_memos_installation():
        success = False
    
    # Create config if missing
    create_config_if_missing()
    
    # Check model file
    model_exists = check_model_file()
    if not model_exists:
        print("‚ö†Ô∏è  Warning: Model file not found. Service will fail to start without it.")
    
    # Test service setup
    if success and not run_service_test():
        success = False
    
    print("\n" + "=" * 50)
    
    if success:
        print("‚úÖ Setup completed successfully!")
        print("\nüéØ Next steps:")
        print("1. Ensure the GGUF model is available at: ./smollm-quantized/smollm-q4_K_M.gguf")
        print("2. Run the service: python run_gguf_service.py")
        print("3. Test health check: curl http://localhost:8000/health")
        print("4. View API docs: http://localhost:8000/docs")
    else:
        print("‚ùå Setup encountered issues. Please resolve them before running the service.")
        sys.exit(1)


if __name__ == "__main__":
    main() 