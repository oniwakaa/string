[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "string-ai-coding-assistant"
version = "1.0.0"
description = "A fully local AI coding assistant with multi-agent capabilities"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AI Coding Assistant Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    # Core backend dependencies
    "fastapi>=0.110.0",
    "uvicorn>=0.27.0",
    "llama-cpp-python>=0.2.57",
    "transformers>=4.39.0",
    "scrapegraphai>=0.2.1",
    "playwright>=1.43.0",
    "qdrant-client>=1.8.0",
    "sqlalchemy>=2.0.0",
    "pydantic>=2.0.0",
    "numpy>=1.24.0",
    "torch>=2.0.0",
    "sentence-transformers>=2.2.0",
    "requests>=2.31.0",
    "aiofiles>=23.0.0",
    "python-multipart>=0.0.6",
    "pyyaml>=6.0",
    
    # CLI-specific dependencies
    "typer[all]>=0.12.0",
    "rich>=13.0.0",
    "httpx>=0.27.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "coverage>=7.0.0",
]

[project.scripts]
string-cli = "cli.main:app"

[project.urls]
Homepage = "https://github.com/your-org/string-ai-coding-assistant"
Documentation = "https://github.com/your-org/string-ai-coding-assistant/docs"
Repository = "https://github.com/your-org/string-ai-coding-assistant"
Issues = "https://github.com/your-org/string-ai-coding-assistant/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["cli*", "src*", "agents*", "config*"]
exclude = ["tests*", "docs*", "*.tests", "*.tests.*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
    | \.mypy_cache
    | \.tox
    | \.venv
    | venv
    | _build
    | buck-out
    | build
    | dist
    | MemOS
    | MemOS_backup
    | llama.cpp
    | vendor
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["cli", "src", "agents", "config"]
skip_glob = ["MemOS/*", "MemOS_backup/*", "llama.cpp/*", "vendor/*"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "MemOS/",
    "MemOS_backup/", 
    "llama.cpp/",
    "vendor/",
    "test_*",
    "venv/"
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["cli", "src", "agents"]
omit = [
    "*/tests/*",
    "*/test_*",
    "MemOS/*",
    "MemOS_backup/*",
    "llama.cpp/*",
    "vendor/*",
    "venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]