{
  "version": "1.0",
  "created": "2025-07-26 08:39:36",
  "description": "Comprehensive intent classifier regression test suite",
  "total_cases": 32,
  "categories": {
    "known_failure": 3,
    "edge_case": 12,
    "standard": 13,
    "ambiguous": 4
  },
  "test_cases": [
    {
      "id": "kf_001",
      "prompt": "Research the history of Python decorators and insert a summary at the top of calculator.py",
      "expected_intent": "web_research",
      "category": "known_failure",
      "difficulty": "hard",
      "description": "Web research with code modification context - should prioritize external data retrieval",
      "keywords": [
        "research",
        "history",
        "insert",
        "summary"
      ],
      "expected_confidence_min": 0.8
    },
    {
      "id": "kf_002",
      "prompt": "Explain how the calculator class works and its design patterns",
      "expected_intent": "codebase_query",
      "category": "known_failure",
      "difficulty": "hard",
      "description": "Understanding request vs analysis - should prioritize comprehension over critique",
      "keywords": [
        "explain",
        "how",
        "works",
        "design patterns"
      ],
      "expected_confidence_min": 0.8
    },
    {
      "id": "kf_003",
      "prompt": "Run unit tests on calculator.py and summarize the results",
      "expected_intent": "tool_execution",
      "category": "known_failure",
      "difficulty": "hard",
      "description": "Execution request with analysis context - should prioritize action over inspection",
      "keywords": [
        "run",
        "unit tests",
        "summarize",
        "results"
      ],
      "expected_confidence_min": 0.8
    },
    {
      "id": "wr_001",
      "prompt": "Get the latest Python documentation from the official website",
      "expected_intent": "web_research",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "Clear external data retrieval",
      "keywords": [
        "get",
        "documentation",
        "website"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "wr_002",
      "prompt": "Fetch API information from external sources and libraries",
      "expected_intent": "web_research",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "External source emphasis",
      "keywords": [
        "fetch",
        "external sources"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "wr_003",
      "prompt": "Look up best practices for error handling online",
      "expected_intent": "web_research",
      "category": "edge_case",
      "difficulty": "easy",
      "description": "Online lookup indicator",
      "keywords": [
        "look up",
        "online"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "wr_004",
      "prompt": "scrape data from https://example.com/api",
      "expected_intent": "web_research",
      "category": "standard",
      "difficulty": "easy",
      "description": "Direct web scraping with URL",
      "keywords": [
        "scrape",
        "https://"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "te_001",
      "prompt": "Execute all unit tests and report any failures",
      "expected_intent": "tool_execution",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "Execution with reporting context",
      "keywords": [
        "execute",
        "unit tests",
        "report"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "te_002",
      "prompt": "Run the linter on this code and fix any issues found",
      "expected_intent": "tool_execution",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "Tool execution with follow-up actions",
      "keywords": [
        "run",
        "linter",
        "fix"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "te_003",
      "prompt": "Test this function with various input values",
      "expected_intent": "tool_execution",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "Function testing request",
      "keywords": [
        "test",
        "function",
        "input"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "te_004",
      "prompt": "run python main.py and show the output",
      "expected_intent": "tool_execution",
      "category": "standard",
      "difficulty": "easy",
      "description": "Direct command execution",
      "keywords": [
        "run",
        "python",
        "output"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "cq_001",
      "prompt": "How does the authentication system work in this application?",
      "expected_intent": "codebase_query",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "System understanding request",
      "keywords": [
        "how does",
        "work",
        "system"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "cq_002",
      "prompt": "Find where the database connection is established",
      "expected_intent": "codebase_query",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "Code location request",
      "keywords": [
        "find",
        "where",
        "database"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "cq_003",
      "prompt": "What design patterns are used in the payment processing?",
      "expected_intent": "codebase_query",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "Pattern identification request",
      "keywords": [
        "what",
        "design patterns",
        "used"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "cq_004",
      "prompt": "show me the implementation of the login function",
      "expected_intent": "codebase_query",
      "category": "standard",
      "difficulty": "easy",
      "description": "Direct implementation request",
      "keywords": [
        "show",
        "implementation",
        "function"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "ca_001",
      "prompt": "Analyze this code for potential security vulnerabilities",
      "expected_intent": "code_analysis",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "Security analysis request",
      "keywords": [
        "analyze",
        "security",
        "vulnerabilities"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "ca_002",
      "prompt": "Review the code quality and suggest improvements",
      "expected_intent": "code_analysis",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "Quality review request",
      "keywords": [
        "review",
        "quality",
        "improvements"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "ca_003",
      "prompt": "Check this implementation for performance bottlenecks",
      "expected_intent": "code_analysis",
      "category": "edge_case",
      "difficulty": "medium",
      "description": "Performance analysis request",
      "keywords": [
        "check",
        "performance",
        "bottlenecks"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "ca_004",
      "prompt": "analyze the code structure and architecture",
      "expected_intent": "code_analysis",
      "category": "standard",
      "difficulty": "easy",
      "description": "Structural analysis request",
      "keywords": [
        "analyze",
        "structure",
        "architecture"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "cg_001",
      "prompt": "Create a new REST API endpoint for user management",
      "expected_intent": "code_generation",
      "category": "standard",
      "difficulty": "easy",
      "description": "New code creation request",
      "keywords": [
        "create",
        "new",
        "API endpoint"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "cg_002",
      "prompt": "Generate a Python function to validate email addresses",
      "expected_intent": "code_generation",
      "category": "standard",
      "difficulty": "easy",
      "description": "Function generation request",
      "keywords": [
        "generate",
        "function",
        "validate"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "cg_003",
      "prompt": "Build a React component for data visualization",
      "expected_intent": "code_generation",
      "category": "standard",
      "difficulty": "easy",
      "description": "Component creation request",
      "keywords": [
        "build",
        "component",
        "React"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "ce_001",
      "prompt": "Optimize the database query for better performance",
      "expected_intent": "code_editing",
      "category": "standard",
      "difficulty": "easy",
      "description": "Performance optimization request",
      "keywords": [
        "optimize",
        "database",
        "performance"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "ce_002",
      "prompt": "Fix the bug in the authentication middleware",
      "expected_intent": "code_editing",
      "category": "standard",
      "difficulty": "easy",
      "description": "Bug fix request",
      "keywords": [
        "fix",
        "bug",
        "authentication"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "ce_003",
      "prompt": "Refactor this method to improve readability",
      "expected_intent": "code_editing",
      "category": "standard",
      "difficulty": "easy",
      "description": "Refactoring request",
      "keywords": [
        "refactor",
        "method",
        "readability"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "doc_001",
      "prompt": "Add comprehensive docstrings to all public methods",
      "expected_intent": "documentation",
      "category": "standard",
      "difficulty": "easy",
      "description": "Docstring addition request",
      "keywords": [
        "add",
        "docstrings",
        "methods"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "doc_002",
      "prompt": "Document the API endpoints with usage examples",
      "expected_intent": "documentation",
      "category": "standard",
      "difficulty": "easy",
      "description": "API documentation request",
      "keywords": [
        "document",
        "API",
        "examples"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "doc_003",
      "prompt": "Create inline comments explaining the algorithm",
      "expected_intent": "documentation",
      "category": "standard",
      "difficulty": "easy",
      "description": "Comment creation request",
      "keywords": [
        "create",
        "comments",
        "explaining"
      ],
      "expected_confidence_min": 0.7
    },
    {
      "id": "amb_001",
      "prompt": "Analyze this code and explain how it works",
      "expected_intent": "code_analysis",
      "category": "ambiguous",
      "difficulty": "hard",
      "description": "Analysis vs explanation ambiguity - analysis should win",
      "keywords": [
        "analyze",
        "explain",
        "how works"
      ],
      "expected_confidence_min": 0.6
    },
    {
      "id": "amb_002",
      "prompt": "Create comprehensive tests for the calculator functions",
      "expected_intent": "code_generation",
      "category": "ambiguous",
      "difficulty": "hard",
      "description": "Test creation vs execution ambiguity - creation should win",
      "keywords": [
        "create",
        "tests",
        "functions"
      ],
      "expected_confidence_min": 0.6
    },
    {
      "id": "amb_003",
      "prompt": "Document the API endpoints and test them thoroughly",
      "expected_intent": "documentation",
      "category": "ambiguous",
      "difficulty": "hard",
      "description": "Documentation vs testing ambiguity - documentation should win",
      "keywords": [
        "document",
        "API",
        "test"
      ],
      "expected_confidence_min": 0.6
    },
    {
      "id": "amb_004",
      "prompt": "Find and fix performance issues in the code",
      "expected_intent": "code_editing",
      "category": "ambiguous",
      "difficulty": "hard",
      "description": "Query vs editing ambiguity - editing should win",
      "keywords": [
        "find",
        "fix",
        "performance"
      ],
      "expected_confidence_min": 0.6
    }
  ]
}